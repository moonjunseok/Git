# 리스트와 튜플의 차이는 불변 여부이며 이외에는 거의 동일하다.
# 튜플은 불변이므로 생성할 때 설정한 값은 변경할 수 없다.

# is 는 id()값을 비교하는 함수다. none은 널(null)로서 값 자체가 정의되어 있지 않으므로 ==로 비교가 불가능하다.

'''리스트
말 그대로 순서대로 저장하는 시퀀스이자 변경 가능한 목록을 말한다. 입력 순서가 유지된다.
len(a) #전체 요소의 개수를 리턴한다.
a[i] #인덱스 i의 요소를 가져온다.
a[i:j] # i부터 j까지 슬라이스의 길이만큼인 k개의 요소를 가져온다.
elem in a #elem 요소가 존재하는지 확인한다
a.count(elem) #elem요소의 개수를 리턴한다.
a.index(elem) #elem요소의 인덱스를 리턴한다.
a.append(elem) #리스트 마지막에 elem요소를 추가한다.
a.pop() #리스트 마지막 요소를 추출한다. 스택의 연산이다.
a.pop(0) #리스트 첫번째 요소를 추출한다. 큐의 연산이다.
del a[i]
a.sort() #정렬한다.
min(a), max(a) #최솟값/최댓값을 계산
a.reverse() #뒤집는다. 리스트는 입력 순서가 유지되므로 뒤집게 되면 입력 순서가 반대로 된다.
'''

# 리스트의 활용방법
import collections

a = list() #리스트 선언
a = [] #또는 대괄호로 좀 더 간단하게 선언 가능
a = [1,2,3]
a.append(4) #a리스트에 4를 마지막 위치에 추가, 중복 가능
a
a.insert(3, 5) #insert함수를 사용하면 특정 위치의 인덱스를 지정해 요소를 추가할 수 있다.
# 3번째 인덱스에 5를 삽입해라 (인덱스는 0부터 시작한다.)
a
# 파이썬의 리스트는 숫자 이외에도 다양한 자료형을 단일 리스트에 관리할 수 있다.
a.append('안녕')
a.append(True)
a
# 값을 꺼내올 때는 다음과 같이 간단한 인덱스를 지정하면 된다.
a[3]
# 슬라이싱
a[1:3] #인덱스 1에서 3이전까지의 값을 가져와라
a[:3] #처음부터 인덱스 3이전까지의 값을 가져와라
a[4:] #인덱스 4에서 마지막까지 값을 가져와라
a[1:4:2] #인덱스 1에서부터 4이전까지 인데 두칸씩 건너뛰게 가져와라
a[9] #존재하지 않는 인덱스를 조회할 경우 에러 발생

try:
    print(a[9])
except IndexError:
    print('존재하지 않는 인덱스')
# IndexError : 인덱스가 리스트의 길이를 넘어설 때 발생하며
#              다음과 같이 try 구문으로 에러에 대한 예외 처리를 할 수 있다.

# 리스트에서 요소를 삭제하는 방법
# 인덱스로 삭제하기, 값으로 삭제하기
del a[1] #인덱스 1을 삭제하라
a.remove(3) #값이 3인 요소를 삭제해라
a.pop(3) #인덱스 3을 추출하고 삭제해라

# 딕셔너리
# 키/값 구조로 이루어짐. 입력 순서가 유지된다.
# 딕셔너리의 주요 연산
'''
len(a) 요소의 개수를 리턴한다.
a[key] 키를 조회하여 값을 리턴한다.
a[key] = value 키/값을 삽입한다.
key in a 딕셔너리에 키가 존재하는지 확인한다.
'''
# 딕셔너리의 활용 방법
# a = dict() or a = {} 라고 선언할 수 있다.
a = {}
a = {'key1' : 'value1','key2': 'value2'} # key1,2는 초기값으로 지정해 선언 가능
a['key3'] ='value3' # key3처럼 나중에 별로 선언도 가능
a
# 존재하지 않는 키를 조회할 경우 에러 발생
try:
    print(a['key4'])
except KeyError:
    print('존재하지 않는 키')
# KeyError로 예외처리 가능

if 'key4' in a:
    print('존재하는 키')
else :
    print('존재하지 않는 키')
# 이런 식으로도 가능

# for 반복문으로도 조회 가능
for k,v in a.items():
    print(k,v)
# 딕셔너리의 키는 del로 삭제 가능
del a['key1']
a

# 딕셔너리 모듈
# 1. defaultdict 객체
# 존재하지 않는 키를 조회할 경우, 에러 메시지를 출력하는 대신 디폴트 값을 기준으로 해당 키에 대한
# 딕셔너리 아이템을 생성해준다.
import collections
a = collections.defaultdict(int)
a['A'] = 5
a['B'] = 4
a
a['C'] += 1
a